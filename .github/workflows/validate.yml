name: ✅ Validate package deployment

on:
  pull_request_target:
    branches: [ master ]
    paths:
      - musify/**
      - tests/**
      - pyproject.tml

  workflow_dispatch:

  workflow_call:
    outputs:
      artifact-name:
        description: "The name of the uploaded package artifacts"
        value: ${{ jobs.build.outputs.artifact-name }}

permissions:
  contents: read

env:
  python-version: '3.12'

jobs:
  lint:
    name: 🔎 Lint
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup - Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: 🔎 Run flake8
        uses: py-actions/flake8@v2

  test:
    name: 🧪 Run tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        name: [ 🐧 Linux ]
        python-version: [ 3.12 ]
        include:
          - os: windows-latest
            name: 🪟 Windows
            python-version: 3.12
          - os: macos-latest
            name: 🍎 Mac
            python-version: 3.12
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup - Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: ⚙️ Setup - Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install '.[test]'

      - name: 🧪 Run tests
        run: |
          pytest --junit-xml=test-results.xml

      - name: 📃 Publish test results report
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results | ${{ matrix.name }} - 🐍 Python${{ matrix.python-version }}

  build:
    name: 📦 Build package
    runs-on: ubuntu-latest
    needs: test
    env:
      artifact-name: python-package-distributions
    outputs:
      artifact-name: ${{ env.artifact-name }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup - Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: ⚙️ Setup - Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch

      - name: ⚙️ Setup - Calculate and assign new version
        run: |
          CURRENT_VERSION=$(curl -L https://pypi.python.org/pypi/musify/json | jq .info.version)
          CURRENT_MAJOR=$(echo ${CURRENT_VERSION//\"} | sed -r "s|^([0-9]+)\..*|\1|")
          CURRENT_MINOR=$(echo ${CURRENT_VERSION//\"} | sed -r "s|.*\.([0-9]+)\..*|\1|")
          CURRENT_PATCH=$(echo ${CURRENT_VERSION//\"} | sed -r "s|.*\.([0-9]+)$|\1|")
          echo Current version = $CURRENT_VERSION
          echo Major=$CURRENT_MAJOR \| Minor=$CURRENT_MINOR \| Patch=$CURRENT_PATCH
          
          if [[ $CURRENT_MAJOR -ne $(date -u "+%Y") || ${CURRENT_MINOR} -ne $(date -u "+%-m") ]]
          then
            echo Resetting patch number 
            CURRENT_PATCH=-1
          fi
          
          VERSION=$(date -u "+%Y").$(date -u "+%-m").$((CURRENT_PATCH + 1))
          echo Assigning new version = $VERSION
          hatch version $VERSION

      - name: 🏗️ Build package
        run: |
          hatch build

      - name: 📦 Upload package artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact-name }}
          path: dist/
          if-no-files-found: error
